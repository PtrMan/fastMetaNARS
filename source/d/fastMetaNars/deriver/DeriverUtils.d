module fastMetaNars.deriver.DeriverUtils;

import fastMetaNars.FlagsOfCopula;
import fastMetaNars.TermReferer;
import fastMetaNars.RuleTable;

struct TemporaryDerivedCompound {
	enum EnumType {
		COMPOUND,
		LEAF,
	}

	static TemporaryDerivedCompound* makeBinaryCompound(FlagsOfCopula flagsOfCopula, TemporaryDerivedCompound* leftChildren, TemporaryDerivedCompound* rightChildren) {
		TemporaryDerivedCompound* result = new TemporaryDerivedCompound;
		result.flagsOfCopula = flagsOfCopula;
		result.leftChildren = leftChildren;
		result.rightChildren = rightChildren;
		result.type = EnumType.COMPOUND;
		return result;
	}

	static TemporaryDerivedCompound* makeLeaf(TermReferer termReferer) {
		TemporaryDerivedCompound* result = new TemporaryDerivedCompound;
		result.protectedTermReferer = termReferer;
		result.type = EnumType.LEAF;
		return result;
	}

	EnumType type;
	FlagsOfCopula flagsOfCopula; // TODO< accessor >
	TemporaryDerivedCompound* leftChildren; // TODO< accessor >
	TemporaryDerivedCompound* rightChildren; // TODO< accessor >

	final @property TermReferer termReferer() {
		assert(type == EnumType.LEAF);
		return protectedTermReferer;
	}

	protected TermReferer protectedTermReferer;
}

// utilities used by the autogenerated deriver

TemporaryDerivedCompound* genBinary(FlagsOfCopula flagsOfCopula, TemporaryDerivedCompound* left, TemporaryDerivedCompound* right) {
	return TemporaryDerivedCompound.makeBinaryCompound(flagsOfCopula, left, right);
}

TemporaryDerivedCompound* genBinary(FlagsOfCopula flagsOfCopula, TemporaryDerivedCompound* left, TermReferer termRefererRight) {
	return TemporaryDerivedCompound.makeBinaryCompound(flagsOfCopula, left, TemporaryDerivedCompound.makeLeaf(termRefererRight));
}

TemporaryDerivedCompound* genBinary(FlagsOfCopula flagsOfCopula, TermReferer termRefererLeft, TemporaryDerivedCompound* right) {
	return TemporaryDerivedCompound.makeBinaryCompound(flagsOfCopula, TemporaryDerivedCompound.makeLeaf(termRefererLeft), right);
}

TemporaryDerivedCompound* genBinary(FlagsOfCopula flagsOfCopula, TermReferer termRefererLeft, TermReferer termRefererRight) {
	return TemporaryDerivedCompound.makeBinaryCompound(flagsOfCopula, TemporaryDerivedCompound.makeLeaf(termRefererLeft), TemporaryDerivedCompound.makeLeaf(termRefererRight));
}

struct TemporaryDerivedTerm {
	TemporaryDerivedCompound* derivedCompound;
	RuleTable.EnumTruthFunction truthfunction;
}

TemporaryDerivedTerm* genTerm(TemporaryDerivedCompound* derivedCompound, RuleTable.EnumTruthFunction truthfunction) {
	TemporaryDerivedTerm* result = new TemporaryDerivedTerm;
	result.derivedCompound = derivedCompound;
	result.truthfunction = truthfunction;
	return result;
}
